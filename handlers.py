from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form
import re
from helpers import fetch_product_data

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def help_command(message: Message):
    await message.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                        "/set_profile - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ\n"
                        "/log_water - –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã\n"
                        "/log_food - –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –µ–¥—ã\n"
                        "/log_workout - –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏—è—Ö\n"
                        "/check_progress - –£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_profile
@router.message(Command("set_profile"))
async def start_form(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)


@router.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Form.height)


@router.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)


@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity_time)


@router.message(Form.activity_time)
async def process_activity(message: Message, state: FSMContext):
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)


@router.message(Form.activity_time)
async def process_activity(message: Message, state: FSMContext):
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_water
@router.message(Command("log_water"))
async def start_form_log_water(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –≤—ã–ø–∏–ª–∏ –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å?(–º–ª):")
    await state.set_state(Form.water_volume)


@router.message(Form.water_volume)
async def start_form_log_water(message: Message, state: FSMContext):
    data = await state.get_data()
    water_volume = data.get("water_volume")
    calc_water = int(water_volume) * 0.001
    await message.reply(f"–í—ã–ø–∏—Ç–æ –≤–æ–¥—ã: {calc_water} –º–ª")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_food
@router.message(Command("log_food"))
async def start_form_log_food(message: Message):
    text = message.text
    try:
        food_item = text.split(maxsplit=1)[1]
        print(food_item, "food_item log_food")  # Debugging line

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[a-zA-Z\s]+$', food_item):
            await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã! –ü—Ä–∏–º–µ—Ä: /log_food banana")
            return None
    except IndexError:
        await message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç! –ü—Ä–∏–º–µ—Ä: /log_food banana")
        return None

    try:
        product = await fetch_product_data(food_item)
        if product:
            product_name = product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            energy_kcal = product.get('nutriments', {}).get('energy-kcal_100g', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            response_text = (
                f"–ü—Ä–æ–¥—É–∫—Ç: {product_name}\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {energy_kcal}"
            )
            await message.reply(f"–¢–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç {response_text}")
        else:
            await message.reply("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except Exception as e:
        print(e, "error log_food")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_workout
@router.message(Command("log_workout"))
async def start_form_log_workout(message: Message, state: FSMContext):
    progress_text = (
        "üèÉ‚Äç‚ôÇÔ∏è –ë–µ–≥ 30 –º–∏–Ω—É—Ç ‚Äî 300 –∫–∫–∞–ª. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ 200 –º–ª –≤–æ–¥—ã."
    )

    await message.reply(progress_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_progress
@router.message(Command("check_progress"))
async def start_form_check_progress(message: Message, state: FSMContext):
    progress_text = (
        "üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:*\n"
        "*–í–æ–¥–∞:*\n"
        f"- –í—ã–ø–∏—Ç–æ: {1500} –º–ª –∏–∑ {2400} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {2400 - 1500} –º–ª.\n\n"
        "*–ö–∞–ª–æ—Ä–∏–∏:*\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {1800} –∫–∫–∞–ª –∏–∑ {2500} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {400} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {1800 - 400} –∫–∫–∞–ª."
    )

    await message.reply(progress_text, parse_mode="Markdown")
