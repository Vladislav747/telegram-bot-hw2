import random

# –¥–ª—è —Å—á–∏—Ç—ã–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

from aiogram import Router
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from states import Form
import re
from helpers import (
    get_food_info,
    calc_calories,
    calc_water_goal,
    get_current_temperature,
    check_user, calc_calories_burned
)

router = Router()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
users = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command("start"))
async def start_command(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def help_command(message: Message):
    await message.reply("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                        "/set_profile - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ —Å–µ–±–µ\n"
                        "/log_water 30 - –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –≤–æ–¥—ã\n"
                        "/log_food banana - –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–∏ –µ–¥—ã\n"
                        "/log_workout –±–µ–≥ 30 - –ó–∞–ø–∏—Å–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏—è—Ö\n"
                        "/check_progress - –£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
                        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /set_profile
@router.message(Command("set_profile"))
async def start_form(message: Message, state: FSMContext):
    await state.update_data(user_id=message.from_user.id)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):")
    await state.set_state(Form.weight)


@router.message(Form.weight)
async def process_weight(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Form.height)
    await state.update_data(weight=message.text)


@router.message(Form.height)
async def process_height(message: Message, state: FSMContext):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)
    await state.update_data(height=message.text)


@router.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Form.activity_time)
    await state.update_data(age=message.text)


@router.message(Form.activity_time)
async def process_activity(message: Message, state: FSMContext):
    await message.reply("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Form.city)
    await state.update_data(activity_time=message.text)


@router.message(Form.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    data = await state.get_data()
    user_id = data["user_id"]

    temperature = await get_current_temperature(data["city"])
    print(f"Temperature in {data['city']}: {temperature}")

    users[user_id] = {
        "weight": data["weight"],
        "height": data["height"],
        "age": data["age"],
        "activity": data["activity_time"],
        "city": data["city"],
        "water_goal": calc_water_goal(data["weight"], temperature),
        "calorie_goal": calc_calories(data["weight"], data["height"], data["age"]),
        "logged_water": 0,
        "logged_calories": 0,
        "burned_calories": 0,
    }
    print(f"Saved users {users}")
    await message.reply("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_water
@router.message(Command("log_water"))
async def start_form_log_water(message: Message):
    user_id = await check_user(message, users)
    if user_id is None:
        return None
    try:
        text = message.text
        user_data = users[user_id]
        water_volume = text.split(maxsplit=1)[1]

        logged_water = user_data["logged_water"] + int(water_volume)
        water_goal = user_data["water_goal"]
        calculated_water = water_goal - logged_water
        if logged_water > water_goal or calculated_water < 0:
            await message.reply("–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –Ω–æ—Ä–º—É –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è –≤–æ–¥—ã!")
            return None
        users[user_id]["logged_water"] = water_goal if logged_water >= water_goal else logged_water
        await message.reply(f"–ù—É–∂–Ω–æ –≤—ã–ø–∏—Ç—å –µ—â–µ –¥–æ –Ω–æ—Ä–º—ã: {calculated_water} –º–ª")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤–æ–¥—ã")
    return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_food
@router.message(Command("log_food"))
async def start_form_log_food(message: Message):
    text = message.text
    user_id = await check_user(message, users)
    if user_id is None:
        return None
    try:
        food_item = text.split(maxsplit=1)[1]
        print(food_item, "food_item log_food")  # Debugging line

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –≤–≤–æ–¥ —Ç–æ–ª—å–∫–æ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã
        if not re.match(r'^[a-zA-Z\s]+$', food_item):
            await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ "
                                "–¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ "
                                "–∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –±—É–∫–≤—ã! –ü—Ä–∏–º–µ—Ä: /log_food banana"
                                )
            return None
    except IndexError:
        await message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–æ–¥—É–∫—Ç! –ü—Ä–∏–º–µ—Ä: /log_food banana")
        return None

    try:
        product = await get_food_info(food_item)
        if product:
            product_name = product.get('product_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            energy_kcal = product.get('nutriments', {}).get('energy-kcal_100g', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')

            response_text = (
                f"–ü—Ä–æ–¥—É–∫—Ç: {product_name}\n"
                f"–ö–∞–ª–æ—Ä–∏–∏: {energy_kcal}"
            )
            users[user_id]["logged_calories"] = users[user_id]["logged_calories"] + energy_kcal
            await message.reply(f"–¢–≤–æ–π –ø—Ä–æ–¥—É–∫—Ç {response_text}")
        else:
            await message.reply("–ü—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return None
    except Exception as e:
        print(e, "error log_food")
        await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–¥—É–∫—Ç–µ")
        return None


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /log_workout
@router.message(Command("log_workout"))
async def start_form_log_workout(message: Message, state: FSMContext):
    user_id = await check_user(message, users)
    if user_id is None:
        return None
    text = message.text
    parts = text.split(maxsplit=2)

    try:
        duration = int(parts[2])
    except ValueError:
        await message.reply("–í—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º! –ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30")
        return None
    activity = parts[1]
    if type(activity) is not str:
        await message.reply("–°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –∞–∫—Ç–∏–≤–Ω–∞—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π! –ü—Ä–∏–º–µ—Ä: /log_workout –±–µ–≥ 30")
        return None

    calories_burned_total = calc_calories_burned(duration)
    needed_water_volume = random.randint(100, 200)

    print(f"log_workout –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å-{duration}, activity-{activity} - –°–æ–∂–∂–µ–Ω–æ {calories_burned_total} –∫–∫–∞–ª")  # Debugging line
    progress_text = (
        f"üèÉ‚Äç‚ôÇÔ∏è {activity} {duration} –º–∏–Ω—É—Ç ‚Äî {calories_burned_total} –∫–∫–∞–ª. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –≤—ã–ø–µ–π—Ç–µ {needed_water_volume} –º–ª –≤–æ–¥—ã."
    )

    users[user_id]["burned_calories"] = users[user_id]["burned_calories"] + calories_burned_total

    await message.reply(progress_text, parse_mode="Markdown")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /check_progress
@router.message(Command("check_progress"))
async def start_form_check_progress(message: Message, state: FSMContext):
    user_id = await check_user(message, users)
    if user_id is None:
        return None
    user_data = users[user_id]

    is_enough_water = "–ù–æ—Ä–º–∞ –≤–æ–¥—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∞" if user_data['logged_water'] > user_data['water_goal'] else f"–û—Å—Ç–∞–ª–æ—Å—å: {user_data['water_goal'] - user_data['logged_water']} –º–ª."

    progress_text = (
        "üìä *–ü—Ä–æ–≥—Ä–µ—Å—Å:*\n"
        "*–í–æ–¥–∞:*\n"
        f"- –í—ã–ø–∏—Ç–æ: {user_data['logged_water']} –º–ª –∏–∑ {user_data['water_goal']} –º–ª.\n"
        f"- {is_enough_water} \n\n"
        "*–ö–∞–ª–æ—Ä–∏–∏:*\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data['logged_calories']} –∫–∫–∞–ª –∏–∑ {user_data['calorie_goal']} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {user_data['burned_calories']} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {user_data['logged_calories'] - user_data['burned_calories']} –∫–∫–∞–ª."
    )

    await message.reply(progress_text, parse_mode="Markdown")
    chart_filepath = send_progress_chart(user_data['logged_calories'], user_data['burned_calories'])
    await message.reply_photo(photo=FSInputFile(chart_filepath), caption="–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫–∞–ª–æ—Ä–∏—è–º üìä")


def send_progress_chart(logged_calories, burned_calories):

    # –î–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    data = {
        'labels': ['–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π', '–°–æ–∂–∂–µ–Ω–æ –∫–∞–ª–æ—Ä–∏–π'],
        'values': [int(logged_calories), int(burned_calories)],  # –ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π
    }
    df = pd.DataFrame(data)

    plt.figure()
    sns.set(rc={'figure.figsize': (8, 6)})  # –†–∞–∑–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–∞
    sns.barplot(x='labels', y='values', data=df, palette="viridis")

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    plt.title("–ì—Ä–∞—Ñ–∏–∫ –∫–∞–ª–æ—Ä–∏–π")
    plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", fontsize=12)
    plt.ylabel("–ó–Ω–∞—á–µ–Ω–∏—è (–∫–∫–∞–ª)", fontsize=12)
    plt.xticks(rotation=0, fontsize=10)
    plt.tight_layout()

    plt.savefig('plot_name.png', dpi=300)
    filename = 'plot_name.png'
    return filename
